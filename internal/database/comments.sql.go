// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCommentLike = `-- name: AddCommentLike :exec
INSERT INTO comment_likes(comment_id,user_id) VALUES($1,$2)
`

type AddCommentLikeParams struct {
	CommentID int32
	UserID    pgtype.UUID
}

func (q *Queries) AddCommentLike(ctx context.Context, arg AddCommentLikeParams) error {
	_, err := q.db.Exec(ctx, addCommentLike, arg.CommentID, arg.UserID)
	return err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments(prose_id,user_id,body,created_at) VALUES($1,$2,$3,$4)
RETURNING id, prose_id, user_id, body, created_at, likes_count
`

type CreateCommentParams struct {
	ProseID   pgtype.UUID
	UserID    pgtype.UUID
	Body      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.ProseID,
		arg.UserID,
		arg.Body,
		arg.CreatedAt,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.ProseID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.LikesCount,
	)
	return i, err
}

const decreaseCommentLikeCount = `-- name: DecreaseCommentLikeCount :one
UPDATE comments
SET likes_count=likes_count-1 WHERE id=$1 RETURNING likes_count
`

func (q *Queries) DecreaseCommentLikeCount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, decreaseCommentLikeCount, id)
	var likes_count int32
	err := row.Scan(&likes_count)
	return likes_count, err
}

const getComments = `-- name: GetComments :many
SELECT c.id, c.body, c.created_at, c.likes_count, u.username,
CASE WHEN c.user_id=$1 THEN true ELSE false END AS Mine,
CASE WHEN Likes.user_id THEN true ELSE false END AS Liked
From comments AS c INNER JOIN users as u ON 
c.user_id=u.id
LEFT JOIN comment_likes as Likes
ON Likes.user_id=$1 AND Likes.comment_id=c.id
WHERE c.prose_id=$2 AND
$3::SERIAL IS NULL OR c.id<$3
ORDER BY c.id DESC 
LIMIT $4
`

type GetCommentsParams struct {
	UserID  pgtype.UUID
	ProseID pgtype.UUID
	Column3 int32
	Limit   int32
}

type GetCommentsRow struct {
	ID         int32
	Body       string
	CreatedAt  pgtype.Timestamp
	LikesCount int32
	Username   string
	Mine       bool
	Liked      bool
}

func (q *Queries) GetComments(ctx context.Context, arg GetCommentsParams) ([]GetCommentsRow, error) {
	rows, err := q.db.Query(ctx, getComments,
		arg.UserID,
		arg.ProseID,
		arg.Column3,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsRow
	for rows.Next() {
		var i GetCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.LikesCount,
			&i.Username,
			&i.Mine,
			&i.Liked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ifCommentLiked = `-- name: IfCommentLiked :one
SELECT EXISTS (SELECT 1 FROM comment_likes WHERE comment_id=$1 AND user_id=$2)
`

type IfCommentLikedParams struct {
	CommentID int32
	UserID    pgtype.UUID
}

func (q *Queries) IfCommentLiked(ctx context.Context, arg IfCommentLikedParams) (bool, error) {
	row := q.db.QueryRow(ctx, ifCommentLiked, arg.CommentID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const increaseCommentLikeCount = `-- name: IncreaseCommentLikeCount :one
UPDATE comments
SET likes_count=likes_count+1 WHERE id=$1 RETURNING likes_count
`

func (q *Queries) IncreaseCommentLikeCount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, increaseCommentLikeCount, id)
	var likes_count int32
	err := row.Scan(&likes_count)
	return likes_count, err
}

const removeCommentLike = `-- name: RemoveCommentLike :exec
DELETE FROM comment_likes WHERE comment_id=$1 AND user_id=$2
`

type RemoveCommentLikeParams struct {
	CommentID int32
	UserID    pgtype.UUID
}

func (q *Queries) RemoveCommentLike(ctx context.Context, arg RemoveCommentLikeParams) error {
	_, err := q.db.Exec(ctx, removeCommentLike, arg.CommentID, arg.UserID)
	return err
}

const updateCommentCount = `-- name: UpdateCommentCount :exec
UPDATE prose
SET comments=comments+1 WHERE id=$1
`

func (q *Queries) UpdateCommentCount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateCommentCount, id)
	return err
}
