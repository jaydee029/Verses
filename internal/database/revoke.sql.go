// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: revoke.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const revokeToken = `-- name: RevokeToken :exec
INSERT INTO revocation(token, revoked_at) VALUES($1, $2)
`

type RevokeTokenParams struct {
	Token     []byte
	RevokedAt pgtype.Timestamp
}

func (q *Queries) RevokeToken(ctx context.Context, arg RevokeTokenParams) error {
	_, err := q.db.Exec(ctx, revokeToken, arg.Token, arg.RevokedAt)
	return err
}

const verifyRefresh = `-- name: VerifyRefresh :one
SELECT EXISTS (
    SELECT 1 FROM revocation WHERE token=$1
) AS value_exists
`

func (q *Queries) VerifyRefresh(ctx context.Context, token []byte) (bool, error) {
	row := q.db.QueryRow(ctx, verifyRefresh, token)
	var value_exists bool
	err := row.Scan(&value_exists)
	return value_exists, err
}
