// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: like.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addlike = `-- name: Addlike :exec
INSERT INTO post_likes(prose_id,user_id)VALUES ($1,$2)
`

type AddlikeParams struct {
	ProseID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) Addlike(ctx context.Context, arg AddlikeParams) error {
	_, err := q.db.Exec(ctx, addlike, arg.ProseID, arg.UserID)
	return err
}

const deletelike = `-- name: Deletelike :exec
DELETE FROM post_likes WHERE prose_id=$1 AND user_id=$2
`

type DeletelikeParams struct {
	ProseID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) Deletelike(ctx context.Context, arg DeletelikeParams) error {
	_, err := q.db.Exec(ctx, deletelike, arg.ProseID, arg.UserID)
	return err
}

const deletelikescount = `-- name: Deletelikescount :one
UPDATE prose SET likes= likes-1 WHERE id=$1 RETURNING likes
`

func (q *Queries) Deletelikescount(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, deletelikescount, id)
	var likes int32
	err := row.Scan(&likes)
	return likes, err
}

const if_likes = `-- name: If_likes :one
SELECT EXISTS (SELECT 1 FROM post_likes WHERE prose_id=$1 AND user_id=$2)
`

type If_likesParams struct {
	ProseID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) If_likes(ctx context.Context, arg If_likesParams) (bool, error) {
	row := q.db.QueryRow(ctx, if_likes, arg.ProseID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const increaselikescount = `-- name: Increaselikescount :one
UPDATE prose SET likes= likes+1 WHERE id=$1 RETURNING likes
`

func (q *Queries) Increaselikescount(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, increaselikescount, id)
	var likes int32
	err := row.Scan(&likes)
	return likes, err
}
