// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name,Email,passwd,id,created_at,updated_at, username) VALUES($1,$2,$3,$4,$5,$6, $7)
RETURNING name, email, passwd, username, id, created_at, updated_at, is_red, followers, followees
`

type CreateUserParams struct {
	Name      string
	Email     string
	Passwd    []byte
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Passwd,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT name, email, passwd, username, id, created_at, updated_at, is_red, followers, followees FROM users WHERE Email=$1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
	)
	return i, err
}

const getUserbyId = `-- name: GetUserbyId :one
SELECT name, email, passwd, username, id, created_at, updated_at, is_red, followers, followees FROM users WHERE id=$1
`

func (q *Queries) GetUserbyId(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserbyId, id)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT Name, username, id, followers, followees ,
CASE WHEN followees.follower_id IS NOT NULL THEN true ELSE false END AS follower,
CASE WHEN followers.followee_id IS NOT NULL THEN true ELSE false END AS following 
FROM users LEFT JOIN follows as followers
ON followers.followee_id=$1 AND followers.follower_id=id
LEFT JOIN follows as followees
ON followees.follower_id=$1 AND followees.followee_id=id
WHERE $2::VARCHAR IS NULL or username> $2 
ORDER BY username ASC LIMIT $3
`

type GetUsersParams struct {
	FolloweeID pgtype.UUID
	Column2    string
	Limit      int32
}

type GetUsersRow struct {
	Name      string
	Username  string
	ID        pgtype.UUID
	Followers int32
	Followees int32
	Follower  bool
	Following bool
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.FolloweeID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.Name,
			&i.Username,
			&i.ID,
			&i.Followers,
			&i.Followees,
			&i.Follower,
			&i.Following,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersingle = `-- name: GetUsersingle :one
SELECT Name, username, id, followers, followees ,
CASE WHEN followees.follower_id IS NOT NULL THEN true ELSE false END AS follower,
CASE WHEN followers.followee_id IS NOT NULL THEN true ELSE false END AS following
FROM users LEFT JOIN follows as followers
ON followers.followee_id=$1 AND followers.follower_id=id
LEFT JOIN follows as followees
ON followees.follower_id=$1 AND followees.followee_id=id
WHERE username =$2
`

type GetUsersingleParams struct {
	FolloweeID pgtype.UUID
	Username   string
}

type GetUsersingleRow struct {
	Name      string
	Username  string
	ID        pgtype.UUID
	Followers int32
	Followees int32
	Follower  bool
	Following bool
}

func (q *Queries) GetUsersingle(ctx context.Context, arg GetUsersingleParams) (GetUsersingleRow, error) {
	row := q.db.QueryRow(ctx, getUsersingle, arg.FolloweeID, arg.Username)
	var i GetUsersingleRow
	err := row.Scan(
		&i.Name,
		&i.Username,
		&i.ID,
		&i.Followers,
		&i.Followees,
		&i.Follower,
		&i.Following,
	)
	return i, err
}

const is_Email = `-- name: Is_Email :one
SELECT EXISTS (SELECT 1 FROM users WHERE Email=$1)
`

func (q *Queries) Is_Email(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Email, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const is_Username = `-- name: Is_Username :one
SELECT EXISTS (SELECT 1 FROM users WHERE username=$1)
`

func (q *Queries) Is_Username(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Username, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const is_red = `-- name: Is_red :one
INSERT INTO users(is_red) VALUES($1)
RETURNING name, email, passwd, username, id, created_at, updated_at, is_red, followers, followees
`

func (q *Queries) Is_red(ctx context.Context, isRed bool) (User, error) {
	row := q.db.QueryRow(ctx, is_red, isRed)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name=$2 ,passwd=$3 ,updated_at=$4 WHERE id=$1
RETURNING name, email, passwd, username, id, created_at, updated_at, is_red, followers, followees
`

type UpdateUserParams struct {
	ID        pgtype.UUID
	Name      string
	Passwd    []byte
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Passwd,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.Username,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
	)
	return i, err
}
