// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(name,Email,passwd,id,created_at,updated_at, username) VALUES($1,$2,$3,$4,$5,$6, $7)
RETURNING name, email, passwd, id, created_at, updated_at, is_red, followers, followees, username
`

type CreateUserParams struct {
	Name      string
	Email     string
	Passwd    []byte
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Passwd,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
		&i.Username,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT name, email, passwd, id, created_at, updated_at, is_red, followers, followees, username FROM users WHERE Email=$1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
		&i.Username,
	)
	return i, err
}

const getUserbyId = `-- name: GetUserbyId :one
SELECT name, email, passwd, id, created_at, updated_at, is_red, followers, followees, username FROM users WHERE id=$1
`

func (q *Queries) GetUserbyId(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserbyId, id)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
		&i.Username,
	)
	return i, err
}

const is_Email = `-- name: Is_Email :one
SELECT EXISTS (SELECT 1 FROM users WHERE Email=$1)
`

func (q *Queries) Is_Email(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Email, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const is_Username = `-- name: Is_Username :one
SELECT EXISTS (SELECT 1 FROM users WHERE username=$1)
`

func (q *Queries) Is_Username(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, is_Username, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const is_red = `-- name: Is_red :one
INSERT INTO users(is_red) VALUES($1)
RETURNING name, email, passwd, id, created_at, updated_at, is_red, followers, followees, username
`

func (q *Queries) Is_red(ctx context.Context, isRed bool) (User, error) {
	row := q.db.QueryRow(ctx, is_red, isRed)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
		&i.Username,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name=$2 ,passwd=$3 ,updated_at=$4 WHERE id=$1
RETURNING name, email, passwd, id, created_at, updated_at, is_red, followers, followees, username
`

type UpdateUserParams struct {
	ID        pgtype.UUID
	Name      string
	Passwd    []byte
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Passwd,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.Name,
		&i.Email,
		&i.Passwd,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRed,
		&i.Followers,
		&i.Followees,
		&i.Username,
	)
	return i, err
}
