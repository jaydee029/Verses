// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: timeline.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchTimelineItems = `-- name: FetchTimelineItems :many
INSERT INTO timeline(prose_id,user_id) 
SELECT $1, follower_id FROM follows WHERE followee_id=$2
RETURNING id,user_id
`

type FetchTimelineItemsParams struct {
	ProseID    pgtype.UUID
	FolloweeID pgtype.UUID
}

type FetchTimelineItemsRow struct {
	ID     int32
	UserID pgtype.UUID
}

func (q *Queries) FetchTimelineItems(ctx context.Context, arg FetchTimelineItemsParams) ([]FetchTimelineItemsRow, error) {
	rows, err := q.db.Query(ctx, fetchTimelineItems, arg.ProseID, arg.FolloweeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchTimelineItemsRow
	for rows.Next() {
		var i FetchTimelineItemsRow
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const inserinTimeline = `-- name: InserinTimeline :exec
INSERT INTO timeline(prose_id,user_id) VALUES($1,$2)
`

type InserinTimelineParams struct {
	ProseID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) InserinTimeline(ctx context.Context, arg InserinTimelineParams) error {
	_, err := q.db.Exec(ctx, inserinTimeline, arg.ProseID, arg.UserID)
	return err
}
