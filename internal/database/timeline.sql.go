// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: timeline.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fetchTimelineItems = `-- name: FetchTimelineItems :many
INSERT INTO timeline(prose_id,user_id) 
SELECT $1, follower_id FROM follows WHERE followee_id=$2
RETURNING id,user_id
`

type FetchTimelineItemsParams struct {
	ProseID    pgtype.UUID
	FolloweeID pgtype.UUID
}

type FetchTimelineItemsRow struct {
	ID     int32
	UserID pgtype.UUID
}

func (q *Queries) FetchTimelineItems(ctx context.Context, arg FetchTimelineItemsParams) ([]FetchTimelineItemsRow, error) {
	rows, err := q.db.Query(ctx, fetchTimelineItems, arg.ProseID, arg.FolloweeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchTimelineItemsRow
	for rows.Next() {
		var i FetchTimelineItemsRow
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimeline = `-- name: GetTimeline :many
SELECT tl.id, tl.prose_id, p.body, p.created_at, p.updated_at, p.likes, p.comments , u.username,
CASE WHEN author_id=$1 THEN true ELSE false END AS Mine,
CASE WHEN Likes.user_id IS NOT NULL THEN true ELSE false END AS Liked
FROM timeline AS tl INNER JOIN prose AS p 
ON tl.prose_id=p.id
INNER JOIN users AS u 
ON p.author_id=u.id
LEFT JOIN post_likes AS Likes
ON Likes.user_id=$1 AND Likes.prose_id=p.id
AND 
$2::TIMESTAMP IS NULL OR p.created_at < $2
WHERE tl.user_id=$1
ORDER BY p.created_at DESC, p.id DESC
LIMIT $3
`

type GetTimelineParams struct {
	AuthorID pgtype.UUID
	Column2  pgtype.Timestamp
	Limit    int32
}

type GetTimelineRow struct {
	ID        int32
	ProseID   pgtype.UUID
	Body      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Likes     int32
	Comments  int32
	Username  string
	Mine      bool
	Liked     bool
}

func (q *Queries) GetTimeline(ctx context.Context, arg GetTimelineParams) ([]GetTimelineRow, error) {
	rows, err := q.db.Query(ctx, getTimeline, arg.AuthorID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimelineRow
	for rows.Next() {
		var i GetTimelineRow
		if err := rows.Scan(
			&i.ID,
			&i.ProseID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Likes,
			&i.Comments,
			&i.Username,
			&i.Mine,
			&i.Liked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const inserinTimeline = `-- name: InserinTimeline :exec
INSERT INTO timeline(prose_id,user_id) VALUES($1,$2)
`

type InserinTimelineParams struct {
	ProseID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) InserinTimeline(ctx context.Context, arg InserinTimelineParams) error {
	_, err := q.db.Exec(ctx, inserinTimeline, arg.ProseID, arg.UserID)
	return err
}
