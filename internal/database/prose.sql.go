// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: prose.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countprose = `-- name: Countprose :one
SELECT COUNT(*) FROM prose WHERE author_id=$1
`

func (q *Queries) Countprose(ctx context.Context, authorID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countprose, authorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createprose = `-- name: Createprose :one
INSERT INTO prose(id,body,author_id,created_at,updated_at) VALUES($1,$2,$3,$4,$5)
RETURNING id, body, author_id, created_at, updated_at, likes
`

type CreateproseParams struct {
	ID        pgtype.UUID
	Body      string
	AuthorID  pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) Createprose(ctx context.Context, arg CreateproseParams) (Prose, error) {
	row := q.db.QueryRow(ctx, createprose,
		arg.ID,
		arg.Body,
		arg.AuthorID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Prose
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
	)
	return i, err
}

const deleteprose = `-- name: Deleteprose :exec
DELETE FROM prose WHERE author_id=$1 AND id=$2
`

type DeleteproseParams struct {
	AuthorID pgtype.UUID
	ID       pgtype.UUID
}

func (q *Queries) Deleteprose(ctx context.Context, arg DeleteproseParams) error {
	_, err := q.db.Exec(ctx, deleteprose, arg.AuthorID, arg.ID)
	return err
}

const getprose = `-- name: Getprose :one
SELECT id, body, author_id, created_at, updated_at, likes FROM prose WHERE author_id=$1 AND id=$2
`

type GetproseParams struct {
	AuthorID pgtype.UUID
	ID       pgtype.UUID
}

func (q *Queries) Getprose(ctx context.Context, arg GetproseParams) (Prose, error) {
	row := q.db.QueryRow(ctx, getprose, arg.AuthorID, arg.ID)
	var i Prose
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Likes,
	)
	return i, err
}

const getsProse = `-- name: GetsProse :many
SELECT id,body,created_at,updated_at FROM prose WHERE author_id=$1
ORDER BY id
`

type GetsProseRow struct {
	ID        pgtype.UUID
	Body      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetsProse(ctx context.Context, authorID pgtype.UUID) ([]GetsProseRow, error) {
	rows, err := q.db.Query(ctx, getsProse, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetsProseRow
	for rows.Next() {
		var i GetsProseRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
