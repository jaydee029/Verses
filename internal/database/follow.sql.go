// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follow.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addfollower = `-- name: Addfollower :exec
INSERT INTO follows(followee_id,follower_id) VALUES($1,$2)
`

type AddfollowerParams struct {
	FolloweeID pgtype.UUID
	FollowerID pgtype.UUID
}

func (q *Queries) Addfollower(ctx context.Context, arg AddfollowerParams) error {
	_, err := q.db.Exec(ctx, addfollower, arg.FolloweeID, arg.FollowerID)
	return err
}

const deletefollower = `-- name: Deletefollower :one
UPDATE users 
SET 
followers= CASE WHEN id=$1 THEN followers-1 ELSE followers END, 
followees= CASE WHEN id=$2 THEN followees-1 ELSE followees END
WHERE id in ($1,$2)
RETURNING followers
`

type DeletefollowerParams struct {
	ID   pgtype.UUID
	ID_2 pgtype.UUID
}

func (q *Queries) Deletefollower(ctx context.Context, arg DeletefollowerParams) (int32, error) {
	row := q.db.QueryRow(ctx, deletefollower, arg.ID, arg.ID_2)
	var followers int32
	err := row.Scan(&followers)
	return followers, err
}

const getIdfromUsername = `-- name: GetIdfromUsername :one
SELECT id FROM users WHERE username=$1
`

func (q *Queries) GetIdfromUsername(ctx context.Context, username string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getIdfromUsername, username)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const if_follows = `-- name: If_follows :one
SELECT EXISTS (SELECT 1 FROM follows WHERE follower_id=$1 AND followee_id=$2)
`

type If_followsParams struct {
	FollowerID pgtype.UUID
	FolloweeID pgtype.UUID
}

func (q *Queries) If_follows(ctx context.Context, arg If_followsParams) (bool, error) {
	row := q.db.QueryRow(ctx, if_follows, arg.FollowerID, arg.FolloweeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removefollower = `-- name: Removefollower :exec
DELETE FROM follows WHERE followee_id=$1 AND follower_id=$2
`

type RemovefollowerParams struct {
	FolloweeID pgtype.UUID
	FollowerID pgtype.UUID
}

func (q *Queries) Removefollower(ctx context.Context, arg RemovefollowerParams) error {
	_, err := q.db.Exec(ctx, removefollower, arg.FolloweeID, arg.FollowerID)
	return err
}

const updatefollower = `-- name: Updatefollower :one
UPDATE users 
SET 
followers=CASE WHEN id=$1 THEN followers+1 ELSE followers END, 
followees=CASE WHEN id=$2 THEN followees+1 ELSE followees END
WHERE id in ($1,$2)
RETURNING followers
`

type UpdatefollowerParams struct {
	ID   pgtype.UUID
	ID_2 pgtype.UUID
}

func (q *Queries) Updatefollower(ctx context.Context, arg UpdatefollowerParams) (int32, error) {
	row := q.db.QueryRow(ctx, updatefollower, arg.ID, arg.ID_2)
	var followers int32
	err := row.Scan(&followers)
	return followers, err
}
