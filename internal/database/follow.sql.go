// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follow.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletefollowee = `-- name: Deletefollowee :exec
UPDATE users SET followees= followees-1 WHERE id=$1
`

func (q *Queries) Deletefollowee(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletefollowee, id)
	return err
}

const deletefollower = `-- name: Deletefollower :one
UPDATE users SET followers= followers-1 WHERE id=$1 RETURNING followers
`

func (q *Queries) Deletefollower(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, deletefollower, id)
	var followers int32
	err := row.Scan(&followers)
	return followers, err
}

const getIdfromUsername = `-- name: GetIdfromUsername :one
SELECT id FROM users WHERE username=$1
`

func (q *Queries) GetIdfromUsername(ctx context.Context, username string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getIdfromUsername, username)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const if_follows = `-- name: If_follows :one
SELECT EXISTS (SELECT 1 FROM follows WHERE follower_id=$1 AND followee_id=$2)
`

type If_followsParams struct {
	FollowerID pgtype.UUID
	FolloweeID pgtype.UUID
}

func (q *Queries) If_follows(ctx context.Context, arg If_followsParams) (bool, error) {
	row := q.db.QueryRow(ctx, if_follows, arg.FollowerID, arg.FolloweeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatefollowee = `-- name: Updatefollowee :exec
UPDATE users SET followees= followees+1 WHERE id=$1
`

func (q *Queries) Updatefollowee(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updatefollowee, id)
	return err
}

const updatefollower = `-- name: Updatefollower :one
UPDATE users SET followers= followers+1 WHERE id=$1 RETURNING followers
`

func (q *Queries) Updatefollower(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, updatefollower, id)
	var followers int32
	err := row.Scan(&followers)
	return followers, err
}
